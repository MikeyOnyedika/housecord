Query {
    _mongooseOptions: { lean: true },
    _transforms: [],
    _hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} },
    _executionStack: null,
    mongooseCollection: Collection {
      collection: Collection { s: [Object] },
      Promise: [Function: Promise],
      modelName: 'User',
      _closed: false,
      opts: {
        autoIndex: true,
        autoCreate: true,
        schemaUserProvidedOptions: [Object],
        capped: false,
        Promise: [Function: Promise],
        '$wasForceClosed': undefined
      },
      name: 'users',
      collectionName: 'users',
      conn: NativeConnection {
        base: [Mongoose],
        collections: [Object],
        models: [Object],
        config: {},
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object: null prototype],
        _readyState: 1,
        _closeCalled: undefined,
        _hasOpened: true,
        plugins: [],
        id: 0,
        _queue: [],
        _listening: false,
        _connectionString: 'mongodb://localhost:27017/housecord',
        _connectionOptions: [Object],
        client: [MongoClient],
        '$initialConnection': [Promise],
        db: [Db],
        host: 'localhost',
        port: 27017,
        name: 'housecord'
      },
      queue: [],
      buffer: false,
      emitter: EventEmitter {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        [Symbol(kCapture)]: false
      }
    },
    model: Model { User },
    schema: Schema {
      obj: { username: [Object], email: [Object], password: [Object] },
      paths: {
        username: [SchemaString],
        email: [SchemaString],
        password: [SchemaString],
        _id: [ObjectId],
        updatedAt: [SchemaDate],
        createdAt: [SchemaDate],
        __v: [SchemaNumber]
      },
      aliases: {},
      subpaths: {},
      virtuals: { id: [VirtualType] },
      singleNestedPaths: {},
      nested: {},
      inherits: {},
      callQueue: [],
      _indexes: [],
      methods: { initializeTimestamps: [Function (anonymous)] },
      methodOptions: {},
      statics: {},
      tree: {
        username: [Object],
        email: [Object],
        password: [Object],
        _id: [Object],
        updatedAt: [Function: Date],
        createdAt: [Object],
        __v: [Function: Number],
        id: [VirtualType]
      },
      query: {},
      childSchemas: [],
      plugins: [ [Object], [Object], [Object], [Object], [Object] ],
      '$id': 1,
      mapPaths: [],
      s: { hooks: [Kareem] },
      _userProvidedOptions: { timestamps: true },
      options: {
        timestamps: true,
        typeKey: 'type',
        id: true,
        _id: true,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        discriminatorKey: '__t',
        autoIndex: null,
        minimize: true,
        optimisticConcurrency: false,
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strictQuery: true,
        strict: true,
        pluralization: true
      },
      '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' },
      '$globalPluginsApplied': true
    },
    op: 'findOne',
    options: {},
    _conditions: { email: 'mike@gmail.com' },
    _fields: { _id: 1 },
    _update: undefined,
    _path: undefined,
    _distinct: undefined,
    _collection: NodeCollection {
      collection: Collection {
        collection: [Collection],
        Promise: [Function: Promise],
        modelName: 'User',
        _closed: false,
        opts: [Object],
        name: 'users',
        collectionName: 'users',
        conn: [NativeConnection],
        queue: [],
        buffer: false,
        emitter: [EventEmitter]
      },
      collectionName: 'users'
    },
    _traceFunction: undefined,
    '$useProjection': true,
    _userProvidedFields: { _id: 1 }
  }